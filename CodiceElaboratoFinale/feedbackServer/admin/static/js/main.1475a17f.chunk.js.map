{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","pages","loading","fetchData","bind","assertThisInitialized","instance","_this2","setState","axios","post","pageSize","page","sorted","filtered","then","res","console","log","concat","rows","length","count","Math","ceil","_this$state","react_default","a","createElement","es","columns","Header","id","accessor","d","manual","onFetchData","filterable","defaultPageSize","style","height","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAQAA,EAAQ,QAkFOC,cA/Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,KAAM,GACNC,MAAO,KACPC,SAAS,GAEXV,EAAKW,UAAYX,EAAKW,UAAUC,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPLA,yEASJO,EAAOO,GAAU,IAAAC,EAAAZ,KACzBA,KAAKa,SAAS,CAAEN,SAAS,IACzBO,IAAMC,KAAK,QAAS,CAClBC,SAAUZ,EAAMY,SAChBC,KAAMb,EAAMa,KACZC,OAAQd,EAAMc,OACdC,SAAUf,EAAMe,WACfC,KAAK,SAAAC,GACNC,QAAQC,IAAR,yBAAAC,OAAqCH,EAAIhB,KAAKoB,KAAKC,SACnDJ,QAAQC,IAAR,mBAAAC,OAA+BH,EAAIhB,KAAKsB,QACxCL,QAAQC,IAAR,mBAAAC,OAA+BpB,EAAMY,WACrCJ,EAAKC,SAAS,CACZR,KAAMgB,EAAIhB,KAAKoB,KACfnB,MAAOsB,KAAKC,KAAKR,EAAIhB,KAAKsB,MAAQvB,EAAMY,UACxCT,SAAS,uCAIN,IAAAuB,EAC0B9B,KAAKI,MAA9BC,EADDyB,EACCzB,KAAMC,EADPwB,EACOxB,MAAOC,EADduB,EACcvB,QACrB,OACEwB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,OAAQ,KACRC,GAAI,KACJC,SAAU,SAAAC,GAAC,OAAIA,EAAEF,KAEnB,CACED,OAAQ,OACRE,SAAU,QAEZ,CACEF,OAAQ,QACRE,SAAU,SAEZ,CACEF,OAAQ,UACRE,SAAU,WAEZ,CACEF,OAAQ,UACRE,SAAU,WAEZ,CACEF,OAAQ,OACRE,SAAU,cAGdE,QAAM,EACNnC,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTkC,YAAazC,KAAKQ,UAClBkC,YAAU,EACVC,gBAAiB,GAEjBC,MAAO,CACLC,OAAQ,SAGVC,UAAU,wBAEZf,EAAAC,EAAAC,cAAA,mBA3EUc,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.1475a17f.chunk.js","sourcesContent":["import React from \"react\";\n//import { render } from \"react-dom\";\n//import _ from \"lodash\";\n\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport axios from 'axios';\nrequire('react-datetime');\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pages: null,\n      loading: true\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  fetchData(state, instance) {\n    this.setState({ loading: true });\n    axios.post('/read', {\n      pageSize: state.pageSize,\n      page: state.page,\n      sorted: state.sorted,\n      filtered: state.filtered\n    }).then(res => {\n      console.log(`res.data.rows.length: ${res.data.rows.length}`);\n      console.log(`res.data.count: ${res.data.count}`);\n      console.log(`state.pageSize: ${state.pageSize}`);\n      this.setState({\n        data: res.data.rows,\n        pages: Math.ceil(res.data.count / state.pageSize),\n        loading: false\n      });\n    })\n  }\n  render() {\n    const { data, pages, loading } = this.state;\n    return (\n      <div>\n\n        <ReactTable\n          columns={[\n            {\n              Header: \"id\",\n              id: \"id\",\n              accessor: d => d.id\n            },\n            {\n              Header: \"Name\",\n              accessor: \"name\"\n            },\n            {\n              Header: \"Email\",\n              accessor: \"email\"\n            },\n            {\n              Header: \"Country\",\n              accessor: \"country\"\n            },\n            {\n              Header: \"Subject\",\n              accessor: \"subject\"\n            },\n            {\n              Header: \"Data\",\n              accessor: \"createdAt\"\n            }\n          ]}\n          manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n          data={data}\n          pages={pages} // Display the total number of pages\n          loading={loading} // Display the loading overlay when we need it\n          onFetchData={this.fetchData} // Request new data when things change\n          filterable\n          defaultPageSize={20}\n          \n          style={{\n            height: \"500px\" // This will force the table body to overflow and scroll, since there is not enough room\n          }}\n          \n          className=\"-striped -highlight\"\n        />\n        <br />\n      </div>\n    );\n  }\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}