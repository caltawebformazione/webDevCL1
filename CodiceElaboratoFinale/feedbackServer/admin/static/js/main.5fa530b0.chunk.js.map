{"version":3,"sources":["components/FilterHeader.js","components/MessagesTable.js","components/TicketTable.js","serviceWorker.js","index.js"],"names":["FilterHeader","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","visible","state","selectionDateRanges","startDate","Date","endDate","key","datePicker","document","querySelector","definedRangesWrapper","dateRangeWrapper","monthAndYearWrapper","months","maxHeight","maxWidth","transitionDuration","setInvisible","dateDisplayItems","querySelectorAll","onclick","setVisible","bind","style","display","_this2","setTimeout","ranges","selection","setState","getRangeIsSet","props","onDateRangeSelect","react_default","a","createElement","dist","onChange","handleChange","showSelectionPreview","showMonthAndYearPickers","React","Component","MessagesTable","data","loading","renderText","assertThisInitialized","renderQA","fetchData","columns","Header","accessor","Cell","c","moment","value","format","sortable","filterable","minWidth","cellInfo","contentEditable","original","qa","placeholder","className","suppressContentEditableWarning","onDoubleClick","e","currentTarget","focus","toConsumableArray","index","onBlur","column","id","target","innerHTML","dangerouslySetInnerHTML","__html","_this3","row","text","post","undefined","axios","then","res","rows","catch","console","error","message","lib","Provider","color","size","verticalAlign","weight","onClick","sendAnswer","fi","instance","_this4","sorted","filtered","ticket","newClearRow","pages","Math","ceil","count","pageSize","page","now","unshift","createdAt","updatedAt","_this$state","es","defaultSorted","desc","onFetchData","showPagination","manual","defaultPageSize","TicketTable","handleDataTable","handleDateSelect","d","components_FilterHeader","height","SubComponent","components_MessagesTable","Boolean","window","location","hostname","match","ReactDOM","render","components_TicketTable","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fa530b0.chunk.js","sourcesContent":["import React from \"react\";\nimport { DateRangePicker } from 'react-date-range';\n//import './filter-header.css';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nclass FilterHeader extends React.Component {\n\tconstructor (){\n\t\tsuper();\n\t\tthis.visible = false;\n\t\tthis.state = {\n\t\t\tselectionDateRanges: [{\n\t\t\t\tstartDate: new Date(),\n\t\t\t\tendDate: new Date(),\n\t\t\t\tkey: 'selection',\n\t\t  \t}]\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\n\t\t//Intero date picker\n\t\tthis.datePicker = document.querySelector(\".rdrDateRangePickerWrapper\");\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper = this.datePicker.querySelector(\".rdrDefinedRangesWrapper\");\n\t\t//Contenitore intervallo date sopra\n\t\tthis.dateRangeWrapper = this.datePicker.querySelector(\".rdrDateRangeWrapper\")\n\t\t//this.dateDisplayWrapper = this.datePicker.querySelector(\".rdrDateDisplayWrapper\");\n\t\t//this.dateDisplay = this.datePicker.querySelector(\".rdrDateDisplay\")\n\t\t//Mese\n\t\tthis.monthAndYearWrapper = this.datePicker.querySelector(\".rdrMonthAndYearWrapper\");\n\t\t//Calendario\n\t\tthis.months = this.datePicker.querySelector(\".rdrMonths\");\n\t\t//Lettura maxHeight e maxWidth impostati nel css\n\t\t//this.maxHeight = this.months.style.maxHeight;\n\t\t//this.maxWidth = this.months.style.maxWidth;\n\t\t//this.transitionDuration = this.months.style.transitionDuration;\n\t\tthis.maxHeight = \"\";\n\t\tthis.maxWidth = \"\";\n\t\tthis.transitionDuration = \"\";\n\n\t\tthis.setInvisible();\n\n\t\t// Inizializzazione eventi sui campi itervallo date\n\t\tthis.dateDisplayItems = this.datePicker.querySelectorAll(\".rdrDateDisplayItem\");\n\t\tthis.dateDisplayItems[0].onclick = this.setVisible.bind(this);\n\t\tthis.dateDisplayItems[1].onclick = this.setVisible.bind(this);\n\t};\n\n\tgetRangeIsSet(){\n\t\tlet dateDisplayItemActive = this.datePicker.querySelector(\".rdrDateDisplayItemActive\");\n\t\tlet r = (dateDisplayItemActive === this.dateDisplayItems[1]);\n\t\treturn (r);\n\t}\n\n\tsetVisible(){\n\t\tthis.visible = true;\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper.style.maxWidth=this.maxWidth;//\"500px\";\n\t\tthis.definedRangesWrapper.style.maxHeight=this.maxHeight;//\"500px\";\n\t\t//Mese\n\t\tthis.monthAndYearWrapper.style.display=\"\";\n\t\t//Calendario\n\t\tthis.months.style.maxHeight=this.maxHeight;//\"500px\";\n\t}\n\t\n\tsetInvisible(){\n\t\tthis.visible = false;\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper.style.maxWidth=\"0\";\n\t\tthis.definedRangesWrapper.style.maxHeight=\"0\";\n\t\t//Mese\n\t\tsetTimeout(()=>{ this.monthAndYearWrapper.style.display=\"none\"; }, 300);\n\t\t\n\t\t//Calendario\n\t\tthis.months.style.maxHeight=\"0\";\n\t}\n\n\thandleChange(ranges){\n\t\tlet selectionDateRanges = [{\n\t\t  startDate: ranges.selection.startDate,\n\t\t  endDate: ranges.selection.endDate,\n\t\t  key: 'selection',\n\t\t}];\n\t\n\t\tthis.setState({\n\t\t\tselectionDateRanges : selectionDateRanges\n\t\t})\n\n\t\tif (this.getRangeIsSet())\n\t\t{\n\t\t\tthis.setInvisible();\n\t\t\tthis.props.onDateRangeSelect(selectionDateRanges);\n\t\t}\n\t}\t\n\n\trender(){\n\t\treturn (\n\t\t\t<DateRangePicker\n\t\t\t\t//locale={locale}\n\t\t\t\tranges={this.state.selectionDateRanges}\n\t\t\t\tonChange={this.handleChange.bind(this)}\n\t\t\t\tshowSelectionPreview={false}\n\t\t\t\tshowMonthAndYearPickers={false}\n\t\t\t\t//showMonthArrow={false}\n\t\t\t\t//moveRangeOnFirstSelection={true}\n\t\t\t\t//showDateDisplay={false}\n\t\t\t\t//showPreview={false}\n\t\t\t\t//dragSelectionEnabled={false}\n\t\t\t\t//direction='horizontal'\n\t\t\t/>\n\t\t)\n\t}\n}\nexport default FilterHeader;","import React from \"react\";\nimport ReactTable from \"react-table\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport \"react-table/react-table.css\";\n//import \"./detail-table.css\";\nimport { FiCheck } from 'react-icons/fi';\nimport { IconContext } from \"react-icons\";\n\nclass MessagesTable extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            loading: true\n        };\n\n        this.renderText = this.renderText.bind(this);\n        this.renderQA = this.renderQA.bind(this);\n        this.fetchData = this.fetchData.bind(this);\n\n        this.columns=[\n          {\n            Header: \"Data\",\n            accessor: \"createdAt\",\n            Cell: c => moment(c.value).format('DD-MM-YY'),\n            sortable: true,\n            maxWidth: 100\n          },\n          {\n            Header: \"Testo\",\n            accessor: \"text\",\n            Cell: this.renderText,\n            filterable: false,\n            sortable: false,\n            minWidth: 400\n          },\n          {\n            Header: \"Q/A\",\n            accessor: \"qa\",\n            Cell: this.renderQA,\n            sortable: false,\n            maxWidth: 50\n          }\n        ]\n      }\n\n      renderText(cellInfo) {\n        return (\n          <div\n            contentEditable={cellInfo.original.qa === 'a'}\n            placeholder={\"Inserire risposta ...\"}\n            className=\"text-box\"\n            suppressContentEditableWarning\n            onDoubleClick={e => {\n              e.currentTarget.focus();\n              const data = [...this.state.data];\n              if (data[cellInfo.index].qa === 'A'){\n                data[cellInfo.index].qa = 'a';\n                this.setState({ data });\n              }\n            }}\n            onBlur={e => {\n              const data = [...this.state.data];\n              data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n              this.setState({ data });\n            }}\n            dangerouslySetInnerHTML={{\n              __html: this.state.data[cellInfo.index][cellInfo.column.id]\n            }}\n          />\n        );\n      }\n      \n      sendAnswer(cellInfo){\n        let row = cellInfo.original;\n        let index =cellInfo.index;\n\n        if(row.text === \"\") return;\n        row.qa='A';\n        let post = (row.id === undefined)? '/setMessage' : '/updateMessage';\n        return axios.post(post, row)\n          .then(res => {\n            let rows = this.state.data;\n            if (rows[index].id === undefined){\n              rows[index].id = res.data.id;\n            }\n            this.setState({data: rows});\n          })\n          .catch(res => {\n            console.error(res.message);\n        });\n      }\n\n      renderQA(cellInfo) {\n        if (cellInfo.original.qa === 'a')\n          return (\n            <IconContext.Provider value={{ color: \"green\", size: \"1.5em\", style: { verticalAlign: 'middle', weight: \"bold\" }}}>\n              <button onClick={this.sendAnswer.bind(this,cellInfo)}><FiCheck/></button>\n            </IconContext.Provider>\n          )\n        else\n          return  <div>{cellInfo.original.qa}</div>\n      }\n\n      fetchData(state, instance) {\n        this.setState({\n          loading: true\n        });\n    \n        axios.post('/readMessages', {\n          //pageSize: state.pageSize,\n          //page: state.page,\n          sorted: state.sorted,\n          filtered: state.filtered,\n          ticket: this.props.row.original.id\n        }).then(res => {\n          this.newClearRow(res.data.rows)\n          this.setState({\n            data: res.data.rows,\n            pages: Math.ceil(res.data.count / state.pageSize),\n            page: state.page,\n            filtered: state.filtered,\n            loading: false\n          });\n        });\n      }\n\n      newClearRow(rows){\n        let now = moment().format();\n        rows.unshift({\n          ticket: rows[0].ticket,\n          qa: 'a',\n          text: \"\",\n          createdAt: now,\n          updatedAt: now\n        })\n      }\n\n      render() {\n        const { data, loading } = this.state;\n        \n        return (\n            <div className=\"detail\">\n                <ReactTable\n                    columns={this.columns}\n                    defaultSorted={[{id: \"id\", desc: true}]}\n                    data={data}\n                    loading={loading} // Visualizza il loading overlay dirante l'attesa dei dati dal server\n                    onFetchData={this.fetchData}\n                    className=\"-striped -highlight\"\n                    showPagination = {false}\n                    manual // L'ordinamento e la paginazione sono determinati dai dati provenienti dal server\n                    defaultPageSize={0}\n                />\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default MessagesTable;","\nimport React from \"react\";\nimport ReactTable from \"react-table\";\nimport axios from 'axios';\nimport moment from 'moment';\n//import ModalDateFilter from './modalComponent/ModalDateFilter.js';\nimport FilterHeader from './FilterHeader.js';\nimport MessagesTable from './MessagesTable.js';\nimport \"react-table/react-table.css\";\n\nclass TicketTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pageSize: 20,\n      page: 0,\n      pages: null,\n      loading: true,\n      selectionDateRanges: [{\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection',\n      }]\n    };\n    this.handleDataTable = this.handleDataTable.bind(this);\n    this.handleDateSelect = this.handleDateSelect.bind(this);\n \n    this.columns=[\n      {\n        Header: \"Ticket\",\n        columns: [\n          {\n            Header: \"ticket\",\n            id: \"id\",\n            accessor: d => d.id\n          },\n          {\n            Header: \"Oggetto\",\n            accessor: \"subject\",\n            filterable: false,\n          },\n          {\n            Header: \"Data\",\n            accessor: \"createdAt\",\n            filterable: false,\n            //Cell: ({value}) => (moment(value).format('DD-MM-YY'))\n            Cell: props => moment(props.value).format('DD-MM-YY'),\n          }\n        ]\n      },\n      {\n        Header: \"Utente\",\n        columns: [\n          {\n            Header: \"Nome\",\n            accessor: \"name\"\n          },\n          {\n            Header: \"Email\",\n            accessor: \"email\"\n          },\n          {\n            Header: \"Paese\",\n            accessor: \"country\"\n          }\n        ]\n      }\n    ];\n  }\n\n  fetchData(state) {\n    this.setState({\n      loading: true\n    });\n\n    let startDate = moment(state.selectionDateRanges[0].startDate).format('YYYY-MM-DD');\n    let endDate = moment(state.selectionDateRanges[0].endDate).format('YYYY-MM-DD');\n\n    axios.post('/readTickets', {\n      pageSize: state.pageSize,\n      page: state.page,\n      sorted: state.sorted,\n      filtered: state.filtered,\n      startDate: startDate,\n      endDate: endDate\n    }).then(res => {\n      this.setState({\n        data: res.data.rows,\n        pages: Math.ceil(res.data.count / state.pageSize),\n        page: state.page,\n        sorted: state.sorted,\n        filtered: state.filtered,\n        loading: false\n      });\n    });\n  }\n\n  handleDataTable(state, instance){\n    state.selectionDateRanges = this.state.selectionDateRanges;\n    this.fetchData(state);\n  }\n\n  handleDateSelect(selectionDateRanges){\n    let state = this.state;\n\t\tstate.selectionDateRanges = selectionDateRanges;\n\t\n\t\tthis.setState({\n\t\t  selectionDateRanges: selectionDateRanges\n\t\t});\n    this.fetchData(state);\n  }\n/*\n  ModalText(p){\n    return <ModalDateFilter dateRange={this.state.selectionDateRanges[0]}/>;\n  }\n*/\n  render() {\n    const { data, pages, loading } = this.state;\n    \n\t\treturn (\n      <div className=\"App\">\n        <FilterHeader\n          //onChange={this.handleDateSelect}\n          onDateRangeSelect={this.handleDateSelect}\n          />\n        <ReactTable\n          columns={this.columns}\n          manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n          data={data}\n          pages={pages} // Display the total number of pages\n          loading={loading} // Display the loading overlay when we need it\n          onFetchData={this.handleDataTable} // Request new data when things change\n          filterable\n          defaultPageSize={20}\n          style={{\n            height: \"500px\" // This will force the table body to overflow and scroll, since there is not enough room\n          }}\n          className=\"-striped -highlight\"\n          SubComponent = {row => {return (<MessagesTable row={row}/>);}}\n        />\n        <br />\n      </div>\n    );\n  }\n}\nexport default TicketTable;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TicketTable from './components/TicketTable';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-date-range/dist/styles.css'; // main style file;\nimport 'react-date-range/dist/theme/default.css'; // theme css file;\n/*\nApp.setState({\n  dateRange: {startDate: new Date(2018,9,1), endDate: new Date(2018,9,2)}\n});\nconsole.log(`state.filtered: ${App.state.filtered}`);\nconsole.log(`state.dateRange: ${App.state.dateRange}`);\n*/\n\nReactDOM.render(<TicketTable />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n\n"],"sourceRoot":""}