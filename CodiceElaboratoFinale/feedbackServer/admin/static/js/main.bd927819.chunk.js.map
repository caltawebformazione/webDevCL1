{"version":3,"sources":["components/ModalDateFilter.js","components/FilterHeader.js","components/DetailTable.js","App.js","serviceWorker.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","openButtonStyle","color","width","borderRadius","fontSize","ModalDateFilter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modalIsOpen","openModal","bind","assertThisInitialized","afterOpenModal","closeModal","setState","subtitle","style","_this2","startDate","moment","props","dateRange","format","endDate","concat","react_default","a","createElement","onClick","lib_default","isOpen","onAfterOpen","onRequestClose","contentLabel","ref","React","Component","FilterHeader","visible","selectionDateRanges","Date","key","datePicker","document","querySelector","definedRangesWrapper","dateRangeWrapper","monthAndYearWrapper","months","maxHeight","maxWidth","transitionDuration","setInvisible","dateDisplayItems","querySelectorAll","onclick","setVisible","display","setTimeout","ranges","selection","getRangeIsSet","onDateRangeSelect","dist","onChange","handleChange","showSelectionPreview","showMonthAndYearPickers","DetailTable","data","loading","renderText","renderQA","fetchData","columns","Header","accessor","Cell","c","value","sortable","filterable","minWidth","cellInfo","contentEditable","original","qa","whiteSpace","border","className","suppressContentEditableWarning","onDoubleClick","e","toConsumableArray","index","onBlur","column","id","target","innerHTML","dangerouslySetInnerHTML","__html","_this3","row","text","post","undefined","axios","then","res","rows","catch","console","error","message","sendAnswer","instance","_this4","pageSize","page","sorted","filtered","ticket","newClearRow","pages","Math","ceil","count","now","unshift","createdAt","updatedAt","_this$state","es","defaultSorted","desc","onFetchData","showPagination","manual","defaultPageSize","App","handleDataTable","handleDateSelect","d","p","components_ModalDateFilter","components_FilterHeader","height","SubComponent","components_DetailTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAKMA,EAAe,CACnBC,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,OACxBC,OAAwB,OACxBC,YAAwB,OACxBC,UAAwB,0BAKtBC,EAAkB,CACpBC,MAAO,OACPC,MAAO,OACPC,aAAc,MACdC,SAAU,OAkECC,cA3Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,aAAa,GAGfR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKY,eAAiBZ,EAAKY,eAAeF,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACtBA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATNA,2EAaZG,KAAKW,SAAS,CAACN,aAAa,6CAK5BL,KAAKY,SAASC,MAAMrB,MAAQ,4CAI5BQ,KAAKW,SAAS,CAACN,aAAa,qCAGrB,IAAAS,EAAAd,KACHe,EAAUC,IAAOhB,KAAKiB,MAAMC,UAAUH,WAAWI,OAAO,YACxDC,EAAQJ,IAAOhB,KAAKiB,MAAMC,UAAUE,SAASD,OAAO,YACpDD,EAAS,GAAAG,OAAMN,EAAN,KAAAM,OAAmBD,GAElC,OACIE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQX,MAAOtB,EAAiBkC,QAASzB,KAAKM,WAC3CY,GAEHI,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,OAAQ3B,KAAKI,MAAMC,YACnBuB,YAAa5B,KAAKS,eAClBoB,eAAgB7B,KAAKU,WACrBG,MAAO9B,EACP+C,aAAa,iBAGbR,EAAAC,EAAAC,cAAA,MAAIO,IAAK,SAAAnB,GAAQ,OAAIE,EAAKF,SAAWA,IAArC,SACAU,EAAAC,EAAAC,cAAA,UAAQC,QAASzB,KAAKU,YAAtB,SACAY,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,qCApDkBQ,IAAMC,mBCuFrBC,kCA3Gd,SAAAA,IAAc,IAAArC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACbrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,QACKmC,SAAU,EACftC,EAAKO,MAAQ,CACZgC,oBAAqB,CAAC,CACrBrB,UAAW,IAAIsB,KACfjB,QAAS,IAAIiB,KACbC,IAAK,eAPMzC,mFAebG,KAAKuC,WAAaC,SAASC,cAAc,8BAEzCzC,KAAK0C,qBAAuB1C,KAAKuC,WAAWE,cAAc,4BAE1DzC,KAAK2C,iBAAmB3C,KAAKuC,WAAWE,cAAc,wBAItDzC,KAAK4C,oBAAsB5C,KAAKuC,WAAWE,cAAc,2BAEzDzC,KAAK6C,OAAS7C,KAAKuC,WAAWE,cAAc,cAK5CzC,KAAK8C,UAAY,GACjB9C,KAAK+C,SAAW,GAChB/C,KAAKgD,mBAAqB,GAE1BhD,KAAKiD,eAGLjD,KAAKkD,iBAAmBlD,KAAKuC,WAAWY,iBAAiB,uBACzDnD,KAAKkD,iBAAiB,GAAGE,QAAUpD,KAAKqD,WAAW9C,KAAKP,MACxDA,KAAKkD,iBAAiB,GAAGE,QAAUpD,KAAKqD,WAAW9C,KAAKP,8CAMxD,OAF4BA,KAAKuC,WAAWE,cAAc,+BACvBzC,KAAKkD,iBAAiB,wCAKzDlD,KAAKmC,SAAU,EAEfnC,KAAK0C,qBAAqB7B,MAAMkC,SAAS/C,KAAK+C,SAC9C/C,KAAK0C,qBAAqB7B,MAAMiC,UAAU9C,KAAK8C,UAE/C9C,KAAK4C,oBAAoB/B,MAAMyC,QAAQ,GAEvCtD,KAAK6C,OAAOhC,MAAMiC,UAAU9C,KAAK8C,iDAGpB,IAAAhC,EAAAd,KACbA,KAAKmC,SAAU,EAEfnC,KAAK0C,qBAAqB7B,MAAMkC,SAAS,IACzC/C,KAAK0C,qBAAqB7B,MAAMiC,UAAU,IAE1CS,WAAW,WAAMzC,EAAK8B,oBAAoB/B,MAAMyC,QAAQ,QAAW,KAGnEtD,KAAK6C,OAAOhC,MAAMiC,UAAU,yCAGhBU,GACZ,IAAIpB,EAAsB,CAAC,CACzBrB,UAAWyC,EAAOC,UAAU1C,UAC5BK,QAASoC,EAAOC,UAAUrC,QAC1BkB,IAAK,cAGPtC,KAAKW,SAAS,CACbyB,oBAAsBA,IAGnBpC,KAAK0D,kBAER1D,KAAKiD,eACLjD,KAAKiB,MAAM0C,kBAAkBvB,qCAK9B,OACCd,EAAAC,EAAAC,cAACoC,EAAA,gBAAD,CAECJ,OAAQxD,KAAKI,MAAMgC,oBACnByB,SAAU7D,KAAK8D,aAAavD,KAAKP,MACjC+D,sBAAsB,EACtBC,yBAAyB,WAjGFhC,IAAMC,oBCiKlBgC,4BAhKX,SAAAA,IAAc,IAAApE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACVpE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,QACKI,MAAQ,CACT8D,KAAM,GACNC,SAAS,GAGbtE,EAAKuE,WAAavE,EAAKuE,WAAW7D,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAElBA,EAAKwE,SAAWxE,EAAKwE,SAAS9D,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAEhBA,EAAKyE,UAAYzE,EAAKyE,UAAU/D,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAEjBA,EAAK0E,QAAQ,CACX,CACEC,OAAQ,OACRC,SAAU,YACVC,KAAM,SAAAC,GAAC,OAAI3D,IAAO2D,EAAEC,OAAOzD,OAAO,aAClC0D,UAAU,EACV9B,SAAU,KAEZ,CACEyB,OAAQ,QACRC,SAAU,OACVC,KAAM7E,EAAKuE,WACXU,YAAY,EACZD,UAAU,EACVE,SAAU,KAEZ,CACEP,OAAQ,MACRC,SAAU,KACVC,KAAM7E,EAAKwE,SACXQ,UAAU,EACV9B,SAAU,KAlCJlD,0EAuCDmF,GAAU,IACfnE,EADeC,EAAAd,KAEfiF,EAA2C,MAAzBD,EAASE,SAASC,GAOxC,OALEtE,EADEoE,EACM,CAACG,WAAY,WAAYC,OAAQ,cAEjC,CAACD,WAAY,WAAYC,OAAQ,QAIzC/D,EAAAC,EAAAC,cAAA,OACEX,MAAOA,EACPoE,gBAAiBA,EACjBK,UAAU,WACVC,gCAA8B,EAC9BC,cAAe,SAAAC,GACb,IAAMvB,EAAIpE,OAAA4F,EAAA,EAAA5F,CAAOgB,EAAKV,MAAM8D,MACG,KAA3BA,EAAKc,EAASW,OAAOR,KACvBjB,EAAKc,EAASW,OAAOR,GAAK,IAC1BrE,EAAKH,SAAS,CAAEuD,WAGpB0B,OAAQ,SAAAH,GACN,IAAMvB,EAAIpE,OAAA4F,EAAA,EAAA5F,CAAOgB,EAAKV,MAAM8D,MAC5BA,EAAKc,EAASW,OAAOX,EAASa,OAAOC,IAAML,EAAEM,OAAOC,UACpDlF,EAAKH,SAAS,CAAEuD,UAElB+B,wBAAyB,CACvBC,OAAQlG,KAAKI,MAAM8D,KAAKc,EAASW,OAAOX,EAASa,OAAOC,0CAMrDd,GAAS,IAAAmB,EAAAnG,KACdoG,EAAMpB,EAASE,SACfS,EAAOX,EAASW,MAEpB,GAAgB,KAAbS,EAAIC,KAAP,CACAD,EAAIjB,GAAG,IACP,IAAImB,OAAmBC,IAAXH,EAAIN,GAAmB,cAAgB,iBACnD,OAAOU,IAAMF,KAAKA,EAAMF,GACrBK,KAAK,SAAAC,GACJ,IAAIC,EAAOR,EAAK/F,MAAM8D,UACCqC,IAAnBI,EAAKhB,GAAOG,KACda,EAAKhB,GAASe,EAAIxC,KAAKyB,IAEzBQ,EAAKxF,SAAS,CAACuD,KAAMyC,MAEtBC,MAAM,SAAAF,GACLG,QAAQC,MAAMJ,EAAIK,6CAIf/B,GACP,MAA6B,MAAzBA,EAASE,SAASC,GACZ7D,EAAAC,EAAAC,cAAA,UAAQC,QAASzB,KAAKgH,WAAWzG,KAAKP,KAAKgF,IAA3C,MAEA1D,EAAAC,EAAAC,cAAA,WAAMwD,EAASE,SAASC,sCAG1B/E,EAAO6G,GAAU,IAAAC,EAAAlH,KACzBA,KAAKW,SAAS,CACZwD,SAAS,IAGXqC,IAAMF,KAAK,gBAAiB,CAC1Ba,SAAU/G,EAAM+G,SAChBC,KAAMhH,EAAMgH,KACZC,OAAQjH,EAAMiH,OACdC,SAAUlH,EAAMkH,SAChBC,OAAQvH,KAAKiB,MAAMmF,IAAIlB,SAASY,KAC/BW,KAAK,SAAAC,GACJQ,EAAKM,YAAYd,EAAIxC,KAAKyC,MAC1BO,EAAKvG,SAAS,CACduD,KAAMwC,EAAIxC,KAAKyC,KACfc,MAAOC,KAAKC,KAAKjB,EAAIxC,KAAK0D,MAAQxH,EAAM+G,UACxCC,KAAMhH,EAAMgH,KACZE,SAAUlH,EAAMkH,SAChBnD,SAAS,0CAKHwC,GAIV,IAAIkB,EAAM7G,MAASG,SAEnBwF,EAAKmB,QAAQ,CACXP,OAAQZ,EAAK,GAAGY,OAChBpC,GAAI,IACJkB,KAAM,GACN0B,UAAWF,EACXG,UAAWH,qCAIN,IAAAI,EACmBjI,KAAKI,MAAvB8D,EADD+D,EACC/D,KAAMC,EADP8D,EACO9D,QAEd,OACI7C,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,UACXhE,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACI3D,QAASvE,KAAKuE,QACd4D,cAAe,CAAC,CAACrC,GAAI,KAAMsC,MAAM,IACjClE,KAAMA,EACNC,QAASA,EACTkE,YAAarI,KAAKsE,UAClBgB,UAAU,sBACVgD,gBAAkB,EAClBC,QAAM,EACNC,gBAAiB,IAErBlH,EAAAC,EAAAC,cAAA,mBA3JUQ,IAAMC,YC6IjBwG,sBAvIb,SAAAA,IAAc,IAAA5I,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyI,IACZ5I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2I,GAAAtI,KAAAH,QACKI,MAAQ,CACX8D,KAAM,GACNiD,SAAU,GACVC,KAAM,EACNK,MAAO,KACPtD,SAAS,EACT/B,oBAAqB,CAAC,CACpBrB,UAAW,IAAIsB,KACfjB,QAAS,IAAIiB,KACbC,IAAK,eAGTzC,EAAK6I,gBAAkB7I,EAAK6I,gBAAgBnI,KAArBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACvBA,EAAK8I,iBAAmB9I,EAAK8I,iBAAiBpI,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAExBA,EAAK0E,QAAQ,CACX,CACEC,OAAQ,SACRD,QAAS,CACP,CACEC,OAAQ,SACRsB,GAAI,KACJrB,SAAU,SAAAmE,GAAC,OAAIA,EAAE9C,KAEnB,CACEtB,OAAQ,UACRC,SAAU,UACVK,YAAY,GAEd,CACEN,OAAQ,OACRC,SAAU,YACVK,YAAY,EAEZJ,KAAM,SAAAzD,GAAK,OAAID,IAAOC,EAAM2D,OAAOzD,OAAO,gBAIhD,CACEqD,OAAQ,SACRD,QAAS,CACP,CACEC,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,QACRC,SAAU,cArDN5E,yEA4DJO,GAAO,IAAAU,EAAAd,KACfA,KAAKW,SAAS,CACZwD,SAAS,IAGX,IAAIpD,EAAYC,IAAOZ,EAAMgC,oBAAoB,GAAGrB,WAAWI,OAAO,cAClEC,EAAUJ,IAAOZ,EAAMgC,oBAAoB,GAAGhB,SAASD,OAAO,cAElEqF,IAAMF,KAAK,eAAgB,CACzBa,SAAU/G,EAAM+G,SAChBC,KAAMhH,EAAMgH,KACZC,OAAQjH,EAAMiH,OACdC,SAAUlH,EAAMkH,SAChBvG,UAAWA,EACXK,QAASA,IACRqF,KAAK,SAAAC,GACN5F,EAAKH,SAAS,CACZuD,KAAMwC,EAAIxC,KAAKyC,KACfc,MAAOC,KAAKC,KAAKjB,EAAIxC,KAAK0D,MAAQxH,EAAM+G,UACxCC,KAAMhH,EAAMgH,KACZC,OAAQjH,EAAMiH,OACdC,SAAUlH,EAAMkH,SAChBnD,SAAS,8CAKC/D,EAAO6G,GACrB7G,EAAMgC,oBAAsBpC,KAAKI,MAAMgC,oBACvCpC,KAAKsE,UAAUlE,4CAGAgC,GACf,IAAIhC,EAAQJ,KAAKI,MACnBA,EAAMgC,oBAAsBA,EAE5BpC,KAAKW,SAAS,CACZyB,oBAAqBA,IAErBpC,KAAKsE,UAAUlE,qCAGPyI,GACR,OAAOvH,EAAAC,EAAAC,cAACsH,EAAD,CAAiB5H,UAAWlB,KAAKI,MAAMgC,oBAAoB,sCAG3D,IAAA6F,EAC0BjI,KAAKI,MAA9B8D,EADD+D,EACC/D,KAAMuD,EADPQ,EACOR,MAAOtD,EADd8D,EACc9D,QAEvB,OACI7C,EAAAC,EAAAC,cAAA,OAAK8D,UAAU,OACbhE,EAAAC,EAAAC,cAACuH,EAAD,CAEEpF,kBAAmB3D,KAAK2I,mBAE1BrH,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACE3D,QAASvE,KAAKuE,QACdgE,QAAM,EACNrE,KAAMA,EACNuD,MAAOA,EACPtD,QAASA,EACTkE,YAAarI,KAAK0I,gBAClB5D,YAAU,EACV0D,gBAAiB,GACjB3H,MAAO,CACLmI,OAAQ,SAEV1D,UAAU,sBACV2D,aAAgB,SAAA7C,GAAQ,OAAQ9E,EAAAC,EAAAC,cAAC0H,EAAD,CAAa9C,IAAKA,OAEpD9E,EAAAC,EAAAC,cAAA,mBAnIUQ,IAAMC,YCDJkH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OAAOnI,EAAAC,EAAAC,cAACkI,EAAD,MAASlH,SAASmH,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.bd927819.chunk.js","sourcesContent":["import React from 'react';\n//import ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport moment from 'moment';\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)'\n  }\n\n};\n\nconst openButtonStyle = {\n    color: 'blue',\n    width: '100%',\n    borderRadius: '5px',\n    fontSize: '70%'\n}\n\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\n//Modal.setAppElement('#yourAppElement')\n\nclass ModalDateFilter extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({modalIsOpen: true});\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({modalIsOpen: false});\n  }\n\n  render() {\n    let startDate=moment(this.props.dateRange.startDate).format('DD-MM-YY');\n    let endDate=moment(this.props.dateRange.endDate).format('DD-MM-YY');\n    let dateRange = `${startDate}|${endDate}`;\n//<button onClick={this.openModal}>{dateRange}</button>\n  return (\n      <div>\n        <button style={openButtonStyle} onClick={this.openModal}>\n          {dateRange}\n        </button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n\n          <h2 ref={subtitle => this.subtitle = subtitle}>Hello</h2>\n          <button onClick={this.closeModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ModalDateFilter;","import React from \"react\";\nimport { DateRangePicker } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n//import '/home/g.piazza/node/react-app/data-table/src/components/filter-header.css';\nimport './filter-header.css';\nclass FilterHeader extends React.Component {\n\tconstructor (){\n\t\tsuper();\n\t\tthis.visible = false;\n\t\tthis.state = {\n\t\t\tselectionDateRanges: [{\n\t\t\t\tstartDate: new Date(),\n\t\t\t\tendDate: new Date(),\n\t\t\t\tkey: 'selection',\n\t\t  \t}]\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\n\t\t//Intero date picker\n\t\tthis.datePicker = document.querySelector(\".rdrDateRangePickerWrapper\");\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper = this.datePicker.querySelector(\".rdrDefinedRangesWrapper\");\n\t\t//Contenitore intervallo date sopra\n\t\tthis.dateRangeWrapper = this.datePicker.querySelector(\".rdrDateRangeWrapper\")\n\t\t//this.dateDisplayWrapper = this.datePicker.querySelector(\".rdrDateDisplayWrapper\");\n\t\t//this.dateDisplay = this.datePicker.querySelector(\".rdrDateDisplay\")\n\t\t//Mese\n\t\tthis.monthAndYearWrapper = this.datePicker.querySelector(\".rdrMonthAndYearWrapper\");\n\t\t//Calendario\n\t\tthis.months = this.datePicker.querySelector(\".rdrMonths\");\n\t\t//Lettura maxHeight e maxWidth impostati nel css\n\t\t//this.maxHeight = this.months.style.maxHeight;\n\t\t//this.maxWidth = this.months.style.maxWidth;\n\t\t//this.transitionDuration = this.months.style.transitionDuration;\n\t\tthis.maxHeight = \"\";\n\t\tthis.maxWidth = \"\";\n\t\tthis.transitionDuration = \"\";\n\n\t\tthis.setInvisible();\n\n\t\t// Inizializzazione eventi sui campi itervallo date\n\t\tthis.dateDisplayItems = this.datePicker.querySelectorAll(\".rdrDateDisplayItem\");\n\t\tthis.dateDisplayItems[0].onclick = this.setVisible.bind(this);\n\t\tthis.dateDisplayItems[1].onclick = this.setVisible.bind(this);\n\t};\n\n\tgetRangeIsSet(){\n\t\tlet dateDisplayItemActive = this.datePicker.querySelector(\".rdrDateDisplayItemActive\");\n\t\tlet r = (dateDisplayItemActive === this.dateDisplayItems[1]);\n\t\treturn (r);\n\t}\n\n\tsetVisible(){\n\t\tthis.visible = true;\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper.style.maxWidth=this.maxWidth;//\"500px\";\n\t\tthis.definedRangesWrapper.style.maxHeight=this.maxHeight;//\"500px\";\n\t\t//Mese\n\t\tthis.monthAndYearWrapper.style.display=\"\";\n\t\t//Calendario\n\t\tthis.months.style.maxHeight=this.maxHeight;//\"500px\";\n\t}\n\t\n\tsetInvisible(){\n\t\tthis.visible = false;\n\t\t//Lato sinistro\n\t\tthis.definedRangesWrapper.style.maxWidth=\"0\";\n\t\tthis.definedRangesWrapper.style.maxHeight=\"0\";\n\t\t//Mese\n\t\tsetTimeout(()=>{ this.monthAndYearWrapper.style.display=\"none\"; }, 300);\n\t\t\n\t\t//Calendario\n\t\tthis.months.style.maxHeight=\"0\";\n\t}\n\n\thandleChange(ranges){\n\t\tlet selectionDateRanges = [{\n\t\t  startDate: ranges.selection.startDate,\n\t\t  endDate: ranges.selection.endDate,\n\t\t  key: 'selection',\n\t\t}];\n\t\n\t\tthis.setState({\n\t\t\tselectionDateRanges : selectionDateRanges\n\t\t})\n\n\t\tif (this.getRangeIsSet())\n\t\t{\n\t\t\tthis.setInvisible();\n\t\t\tthis.props.onDateRangeSelect(selectionDateRanges);\n\t\t}\n\t}\t\n\n\trender(){\n\t\treturn (\n\t\t\t<DateRangePicker\n\t\t\t\t//locale={locale}\n\t\t\t\tranges={this.state.selectionDateRanges}\n\t\t\t\tonChange={this.handleChange.bind(this)}\n\t\t\t\tshowSelectionPreview={false}\n\t\t\t\tshowMonthAndYearPickers={false}\n\t\t\t\t//showMonthArrow={false}\n\t\t\t\t//moveRangeOnFirstSelection={true}\n\t\t\t\t//showDateDisplay={false}\n\t\t\t\t//showPreview={false}\n\t\t\t\t//dragSelectionEnabled={false}\n\t\t\t\t//direction='horizontal'\n\t\t\t/>\n\t\t)\n\t}\n}\nexport default FilterHeader;","import React from \"react\";\nimport ReactTable from \"react-table\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport \"react-table/react-table.css\";\nimport \"./detail-table.css\";\nclass DetailTable extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            loading: true\n        };\n\n        this.renderText = this.renderText.bind(this);\n\n        this.renderQA = this.renderQA.bind(this);\n\n        this.fetchData = this.fetchData.bind(this);\n     \n        this.columns=[\n          {\n            Header: \"Data\",\n            accessor: \"createdAt\",\n            Cell: c => moment(c.value).format('DD-MM-YY'),\n            sortable: true,\n            maxWidth: 100\n          },\n          {\n            Header: \"Testo\",\n            accessor: \"text\",\n            Cell: this.renderText,\n            filterable: false,\n            sortable: false,\n            minWidth: 400\n          },\n          {\n            Header: \"Q/A\",\n            accessor: \"qa\",\n            Cell: this.renderQA,\n            sortable: false,\n            maxWidth: 50\n          }\n        ]\n      }\n\n      renderText(cellInfo) {\n        let style;\n        let contentEditable = cellInfo.original.qa === 'a';\n        if (contentEditable) {\n          style = {whiteSpace: \"pre-wrap\", border: \".5px solid\"};\n        } else {\n          style = {whiteSpace: \"pre-wrap\", border: \"none\"};\n        }\n\n        return (\n          <div\n            style={style}\n            contentEditable={contentEditable}\n            className=\"text-box\"\n            suppressContentEditableWarning\n            onDoubleClick={e => {\n              const data = [...this.state.data];\n              if (data[cellInfo.index].qa == 'A'){\n                data[cellInfo.index].qa = 'a';\n                this.setState({ data });\n              }\n            }}\n            onBlur={e => {\n              const data = [...this.state.data];\n              data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\n              this.setState({ data });\n            }}\n            dangerouslySetInnerHTML={{\n              __html: this.state.data[cellInfo.index][cellInfo.column.id]\n            }}\n          />\n        );\n      }\n      \n      sendAnswer(cellInfo){\n        let row = cellInfo.original;\n        let index =cellInfo.index;\n\n        if(row.text === \"\") return;\n        row.qa='A';\n        let post = (row.id === undefined)? '/setMessage' : '/updateMessage';\n        return axios.post(post, row)\n          .then(res => {\n            let rows = this.state.data;\n            if (rows[index].id === undefined){\n              rows[index] = res.data[index];\n            }        \n            this.setState({data: rows});\n          })\n          .catch(res => {\n            console.error(res.message);\n        });\n      }\n\n      renderQA(cellInfo) {\n        if (cellInfo.original.qa === 'a')\n          return  <button onClick={this.sendAnswer.bind(this,cellInfo)}>OK</button>\n        else\n          return  <div>{cellInfo.original.qa}</div>\n      }\n\n      fetchData(state, instance) {\n        this.setState({\n          loading: true\n        });\n    \n        axios.post('/readMessages', {\n          pageSize: state.pageSize,\n          page: state.page,\n          sorted: state.sorted,\n          filtered: state.filtered,\n          ticket: this.props.row.original.id\n        }).then(res => {\n            this.newClearRow(res.data.rows)\n            this.setState({\n            data: res.data.rows,\n            pages: Math.ceil(res.data.count / state.pageSize),\n            page: state.page,\n            filtered: state.filtered,\n            loading: false\n          });\n        });\n      }\n\n      newClearRow(rows){\n        //let maxId = Math.max.apply(Math, rows.map( row => row.id));\n        //let maxId = Math.max(...rows.map(row => row.id),0 );\n        //let row = rows.find(row => row.id === maxId);\n        let now = moment().format();\n        //id: ++maxId,\n        rows.unshift({\n          ticket: rows[0].ticket,\n          qa: 'a',\n          text: \"\",\n          createdAt: now,\n          updatedAt: now\n        })\n      }\n\n      render() {\n        const { data, loading } = this.state;\n        \n        return (\n            <div className=\"detail\">\n                <ReactTable\n                    columns={this.columns}\n                    defaultSorted={[{id: \"id\", desc: true}]}\n                    data={data}\n                    loading={loading} // Display the loading overlay when we need it\n                    onFetchData={this.fetchData}\n                    className=\"-striped -highlight\"\n                    showPagination = {false}\n                    manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n                    defaultPageSize={0}\n                />\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default DetailTable;","\nimport React from \"react\";\nimport ReactTable from \"react-table\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport ModalDateFilter from './components/ModalDateFilter.js';\nimport FilterHeader from './components/FilterHeader.js';\nimport DetailTable from './components/DetailTable.js';\nimport \"react-table/react-table.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      pageSize: 20,\n      page: 0,\n      pages: null,\n      loading: true,\n      selectionDateRanges: [{\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection',\n      }]\n    };\n    this.handleDataTable = this.handleDataTable.bind(this);\n    this.handleDateSelect = this.handleDateSelect.bind(this);\n \n    this.columns=[\n      {\n        Header: \"Ticket\",\n        columns: [\n          {\n            Header: \"ticket\",\n            id: \"id\",\n            accessor: d => d.id\n          },\n          {\n            Header: \"Oggetto\",\n            accessor: \"subject\",\n            filterable: false,\n          },\n          {\n            Header: \"Data\",\n            accessor: \"createdAt\",\n            filterable: false,\n            //Cell: ({value}) => (moment(value).format('DD-MM-YY'))\n            Cell: props => moment(props.value).format('DD-MM-YY'),\n          }\n        ]\n      },\n      {\n        Header: \"Utente\",\n        columns: [\n          {\n            Header: \"Nome\",\n            accessor: \"name\"\n          },\n          {\n            Header: \"Email\",\n            accessor: \"email\"\n          },\n          {\n            Header: \"Paese\",\n            accessor: \"country\"\n          }\n        ]\n      }\n    ];\n  }\n\n  fetchData(state) {\n    this.setState({\n      loading: true\n    });\n\n    let startDate = moment(state.selectionDateRanges[0].startDate).format('YYYY-MM-DD');\n    let endDate = moment(state.selectionDateRanges[0].endDate).format('YYYY-MM-DD');\n\n    axios.post('/readTickets', {\n      pageSize: state.pageSize,\n      page: state.page,\n      sorted: state.sorted,\n      filtered: state.filtered,\n      startDate: startDate,\n      endDate: endDate\n    }).then(res => {\n      this.setState({\n        data: res.data.rows,\n        pages: Math.ceil(res.data.count / state.pageSize),\n        page: state.page,\n        sorted: state.sorted,\n        filtered: state.filtered,\n        loading: false\n      });\n    });\n  }\n\n  handleDataTable(state, instance){\n    state.selectionDateRanges = this.state.selectionDateRanges;\n    this.fetchData(state);\n  }\n\n  handleDateSelect(selectionDateRanges){\n    let state = this.state;\n\t\tstate.selectionDateRanges = selectionDateRanges;\n\t\n\t\tthis.setState({\n\t\t  selectionDateRanges: selectionDateRanges\n\t\t});\n    this.fetchData(state);\n  }\n\n  ModalText(p){\n    return <ModalDateFilter dateRange={this.state.selectionDateRanges[0]}/>;\n  }\n\n  render() {\n    const { data, pages, loading } = this.state;\n    \n\t\treturn (\n      <div className=\"App\">\n        <FilterHeader\n          //onChange={this.handleDateSelect}\n          onDateRangeSelect={this.handleDateSelect}\n          />\n        <ReactTable\n          columns={this.columns}\n          manual // Forces table not to paginate or sort automatically, so we can handle it server-side\n          data={data}\n          pages={pages} // Display the total number of pages\n          loading={loading} // Display the loading overlay when we need it\n          onFetchData={this.handleDataTable} // Request new data when things change\n          filterable\n          defaultPageSize={20}\n          style={{\n            height: \"500px\" // This will force the table body to overflow and scroll, since there is not enough room\n          }}\n          className=\"-striped -highlight\"\n          SubComponent = {row => {return (<DetailTable row={row}/>);}}\n        />\n        <br />\n      </div>\n    );\n  }\n}\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-date-range/dist/styles.css'; // main style file;\nimport 'react-date-range/dist/theme/default.css'; // theme css file;\n/*\nApp.setState({\n  dateRange: {startDate: new Date(2018,9,1), endDate: new Date(2018,9,2)}\n});\nconsole.log(`state.filtered: ${App.state.filtered}`);\nconsole.log(`state.dateRange: ${App.state.dateRange}`);\n*/\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.register();\nserviceWorker.unregister();\n\n"],"sourceRoot":""}